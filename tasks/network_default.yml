######################################################################
# Prepare virtual network virbr0
######################################################################

- name: Check if default network is present
  set_fact:
    kvm_net_default_present: "{{ ((kvm_net_list.list_nets | join(',')).find('default') != -1) | ternary (true,false) }}"

- debug:
    var: kvm_net_default_present

# Get info about 'default' network if it exists
- name: KVM - get info about virtio net default
  community.libvirt.virt_net:
    command: get_xml
    name: default
  register: kvm_net_default
  become: yes
  changed_when: false
  when: 
     - kvm_net_default_present

- debug:
    var: kvm_net_default

- name: Remove virtual network interface
  block:

  - name: Stop network default
    community.libvirt.virt_net:
      command: destroy
      name: default
    become: yes
    changed_when: true
    
  - name: KVM - undefine network default
    community.libvirt.virt_net:
      command: undefine
      name: default
    become: yes
    changed_when: true

  # When network exists but not has desired IP
  when:
    - kvm_net_default_present and kvm_net_default.get_xml.find("<ip address='"+kvm_default_ip+"' netmask='255.255.255.0'>") == -1
    - not ansible_check_mode

- name: KVM - set IP range for DHCP pool
  set_fact:
    kvm_dhcp_start: "{{ kvm_default_ip | ansible.utils.ipsubnet(24) | ansible.utils.ipmath(2) }}"
    kvm_dhcp_end: "{{ kvm_default_ip | ansible.utils.ipsubnet(24) | ansible.utils.ipmath(250) }}"
#    when: (kvm_net_list.list_nets | join(',')).find("default") != -1

- name: KVM - define network default
  community.libvirt.virt_net:
    name: "default"
    command: define
    xml: |
      <network>
        <name>default</name>      
        <bridge name='virbr0' stp='on' delay='0' />   
        <forward mode='open'/>
        <ip address='{{ kvm_default_ip }}' netmask='255.255.255.0'>
          <dhcp>
            <range start='{{ kvm_dhcp_start }}' end='{{ kvm_dhcp_end }}'/>
          </dhcp>
        </ip>
      </network>
  when:
    (
    not kvm_net_default_present or 
    (kvm_net_default_present and kvm_net_default.get_xml.find("<ip address='"+kvm_default_ip+"' netmask='255.255.255.0'>") == -1)
    ) and not ansible_check_mode
  become: yes

- name: KVM - autostart network default
  community.libvirt.virt_net:
    name: default
    autostart: yes
  when: >-
    not ansible_check_mode
  become: yes

- name: KVM - start network default
  community.libvirt.virt_net:
    name: default
    state: active
    autostart: yes
  become: yes
  when: >-
    not ansible_check_mode

- name: Allow virbr0 in iptables
  iptables:
    chain: INPUT
    in_interface: "virbr0"
    jump: ACCEPT
    comment: Allow virbr0
  become: yes
  register: kvm_iptables1

#########################################################
# Outgoing NAT
#########################################################

- name: Enable outgoint nat
  iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ kvm_default_ip | ansible.utils.ipsubnet(24) }}"
    out_interface: "{{ ansible_default_ipv4.interface }}"
    jump: MASQUERADE
    comment: "Outgoing NAT for virbr0"
  become: yes
  register: kvm_iptables2

# Save iptables rules and remove any remains of LIBVIRT rules
- name: Save iptables to disk
  shell: |
    iptables-save | grep -v 'TEMP ' | grep -v 'LIBVIRT_' \
    | grep -v -i 'docker' | grep -v 'A FORWARD ' \
    | grep -v 'ufw-' >/etc/iptables/rules.v4
  become: yes
  when: >-
    (kvm_iptables1.changed or
    kvm_iptables2.changed) and
    not ansible_check_mode

 

